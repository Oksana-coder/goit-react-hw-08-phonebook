{"version":3,"sources":["redux/contacts/contacts-selectors.js","components/ContactForm/ContactForm.js","components/Filter/Filter.js","components/ContactListItem/ContactListItem.js","components/ContactList/ContactList.js","pages/ContactPage/ContactsPage.js"],"names":["getContacts","state","contacts","items","getFilter","filter","getLoading","loading","getFilteredContacts","createSelector","normalizedFilter","toLowerCase","name","includes","useStyles","makeStyles","theme","margin","spacing","textField","width","button","ContactForm","useState","setName","number","setNumber","existingContacts","useSelector","dispatch","useDispatch","classes","handleChange","event","target","value","className","onSubmit","preventDefault","newContact","map","contact","alert","operations","addContact","FormControl","clsx","variant","InputLabel","htmlFor","OutlinedInput","id","type","onChange","labelWidth","pattern","title","required","Button","color","endIcon","Filter","changeFilter","currentTarget","ContactListItem","onDeleteContact","onClick","ContactList","deleteContact","ContactsPage","isLoading","useEffect","fetchContacts","height"],"mappings":"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","file":"static/js/5.047060be.chunk.js","sourcesContent":["import { createSelector } from \"@reduxjs/toolkit\";\n\nexport const getContacts = state => state.contacts.items;\nexport const getFilter = state => state.contacts.filter;\nexport const getLoading = state => state.contacts.loading;\n\nexport const getFilteredContacts = createSelector(\n  [getContacts, getFilter],\n  (contacts, filter) => {\n    const normalizedFilter = filter.toLowerCase();\n\n    return contacts.filter(({ name }) =>\n      name.toLowerCase().includes(normalizedFilter),\n    );\n  },\n);\n\n\n// export const getFilteredContacts = state => {        //example without memoization\n//   const contacts = getContacts(state);\n//   const filter = getFilter(state);\n//   const normalizedFilter = filter.toLowerCase();\n\n//   return contacts.filter(({ name }) =>\n//     name.toLowerCase().includes(normalizedFilter),\n//   );\n// };","import { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { operations } from 'redux/contacts';\nimport { getContacts } from 'redux/contacts';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/core/styles';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\nimport Button from '@material-ui/core/Button';\nimport ContactPhoneIcon from '@material-ui/icons/ContactPhone';\nimport './ContactForm.scss';\n\nconst useStyles = makeStyles((theme) => ({\n  margin: {\n    margin: theme.spacing(1),\n  },\n  textField: {\n    width: '250px',\n  },\n  button: {\n    margin: theme.spacing(1),\n    width: '250px',\n  },\n}));\n\nexport default function ContactForm() {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const existingContacts = useSelector(getContacts);\n  const dispatch = useDispatch();\n  const classes = useStyles();\n\n  const handleChange = event => {\n    const { name, value } = event.target;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      \n      case 'number':\n        setNumber(value);\n        break;\n      \n      default:\n        return;\n    }\n  };\n  \n  const handleSubmit = event => {\n    event.preventDefault();\n\n    const newContact = name.toLowerCase();\n    const existingContactsNames = existingContacts.map(contact => contact.name.toLowerCase());\n    if (existingContactsNames.includes(newContact)) {\n      alert(`${newContact} is already in contacts.`);\n      return;\n    }\n\n    dispatch(operations.addContact({name, number}));\n    setName('');\n    setNumber('');\n  };\n  \n    return (\n      <form className=\"contact-form\" onSubmit={handleSubmit}>\n      \n        <FormControl className={clsx(classes.margin, classes.textField)} variant=\"outlined\">\n          <InputLabel htmlFor=\"outlined-name\">Name</InputLabel>\n          <OutlinedInput\n            id=\"outlined-name\"\n            type=\"text\"\n            name=\"name\"\n            value={name}\n            onChange={handleChange}\n            labelWidth={70}\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"A name can consist only of letters, apostrophe, dashes, and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan, etc.\"\n            required\n          />\n        </FormControl>\n\n        <FormControl className={clsx(classes.margin, classes.textField)} variant=\"outlined\">\n          <InputLabel htmlFor=\"outlined-number\">Number</InputLabel>\n          <OutlinedInput\n            id=\"outlined-number\"\n            type=\"tel\"\n            name=\"number\"\n            value={number}\n            onChange={handleChange}\n            labelWidth={70}\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"A phone number can consist only of numbers, dashes, spaces, parentheses and can start with + .\"\n            required\n          />\n        </FormControl>\n        \n        <Button\n          type=\"submit\"\n          variant=\"contained\"\n          color=\"primary\"\n          className={classes.button}\n          endIcon={<ContactPhoneIcon />}\n        >\n          Add contact\n        </Button>\n    </form>\n    )\n}\n\n\n\n\n/* <label className=\"contact-form__label\">\n        Name\n        <input\n          type=\"text\"\n          className=\"contact-form__input\"\n          name=\"name\"\n          value={name}\n          onChange={handleChange}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n        />\n      </label> */\n/* <label className=\"contact-form__label\">\n        Number\n        <input\n          type=\"tel\"\n          className=\"contact-form__input\"  \n          name=\"number\"\n          value={number}\n          onChange={handleChange}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          required\n        />\n      </label> */\n/* <button\n          type=\"submit\"\n          className=\"contact-form__btn\"\n        >\n        Add contact\n    </button>  */","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { changeFilter } from 'redux/contacts';\nimport { getFilter } from 'redux/contacts';\nimport './Filter.scss';\n\nconst Filter = () => {\n  const value = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  return (\n    <label className=\"contact-filter\">\n      Find contacts by name\n      <input\n        type=\"text\"\n        className=\"contact-filter__input\"\n        value={value}\n        onChange={event => dispatch(changeFilter(event.currentTarget.value))} />\n    </label>\n  );\n};\n\nexport default Filter;\n\n\n\n\n// const mapStateToProps = (state) => ({\n//   value: state.contacts.filter,\n// });\n\n// const mapDispatchToProps = dispatch => ({\n//   onChange: (event) => dispatch(actions.changeFilter(event.target.value)),\n// });\n\n// export default connect(mapStateToProps, mapDispatchToProps)(Filter);","import React from 'react';\nimport IconButton from '@material-ui/core/Button';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport './ContactListItem.scss';\n\nconst ContactListItem = ({ name, number, onDeleteContact }) => {\n\n  return (\n  <>\n    <span className=\"contact-details\">{name}: {number}</span>\n      <IconButton\n        type=\"button\"\n        color=\"secondary\"\n        onClick={onDeleteContact}\n        aria-label=\"delete\">\n          <DeleteIcon />\n      </IconButton>\n  </>\n);\n}\n\nexport default ContactListItem;\n\n\n\n\n\n/* <button\n      type=\"button\"\n      className=\"contact-list__delete-btn\"\n      onClick={onDeleteContact}>Delete</button> */","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport ContactListItem from '../ContactListItem';\nimport { operations } from 'redux/contacts';\nimport { getFilteredContacts } from 'redux/contacts';\nimport './ContactList.scss';\n\n\nconst ContactList = () => {\n  const contacts = useSelector(getFilteredContacts);\n  const dispatch = useDispatch();\n\n  const onDeleteContact = id => dispatch(operations.deleteContact(id));\n\n  return(\n  <ul className=\"contact-list\">\n    {contacts.map(({ id, name, number}) => (\n      <li key={id} className=\"contact-list__item\">\n        <ContactListItem\n          name={name}\n          number={number}\n          onDeleteContact={() => onDeleteContact(id)}\n        />\n      </li>\n    ))}\n  </ul>\n);\n};\n\nexport default ContactList;\n","import { useEffect } from 'react';\nimport ContactForm from 'components/ContactForm';\nimport Filter from 'components/Filter';\nimport ContactList from 'components/ContactList'\nimport { useDispatch, useSelector } from 'react-redux';\nimport { operations } from 'redux/contacts';\nimport { getLoading } from 'redux/contacts';\nimport Loader from 'react-loader-spinner';\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\nimport './ContactPage.scss';\n\nexport default function ContactsPage() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(getLoading);\n\n  useEffect(() => {\n    dispatch(operations.fetchContacts());\n  }, [dispatch]);\n\n    return (\n      <div className=\"contact-page-container\">\n        <ContactForm />\n        <div className=\"contacts-display\">\n          <h2>Contacts</h2>\n          <Filter />\n\n          {isLoading &&\n            <Loader\n              type=\"Puff\"\n              color=\"#00BFFF\"\n              height={100}\n              width={100}\n            />}\n      \n          <ContactList />\n        </div>\n      </div>\n    )\n  }"],"sourceRoot":""}